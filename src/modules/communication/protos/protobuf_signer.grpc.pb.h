// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf_signer.proto
#ifndef GRPC_protobuf_5fsigner_2eproto__INCLUDED
#define GRPC_protobuf_5fsigner_2eproto__INCLUDED

#include "protobuf_signer.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc_signer {

class GruutNetworkService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_signer.GruutNetworkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status join(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc_signer::GrpcMsgChallenge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgChallenge>> Asyncjoin(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgChallenge>>(AsyncjoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgChallenge>> PrepareAsyncjoin(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgChallenge>>(PrepareAsyncjoinRaw(context, request, cq));
    }
    virtual ::grpc::Status dhKeyEx(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc_signer::GrpcMsgResponse2* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgResponse2>> AsyncdhKeyEx(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgResponse2>>(AsyncdhKeyExRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgResponse2>> PrepareAsyncdhKeyEx(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgResponse2>>(PrepareAsyncdhKeyExRaw(context, request, cq));
    }
    virtual ::grpc::Status keyExFinished(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc_signer::GrpcMsgAccept* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgAccept>> AsynckeyExFinished(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgAccept>>(AsynckeyExFinishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgAccept>> PrepareAsynckeyExFinished(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgAccept>>(PrepareAsynckeyExFinishedRaw(context, request, cq));
    }
    virtual ::grpc::Status sigSend(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc_signer::NoReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::NoReply>> AsyncsigSend(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::NoReply>>(AsyncsigSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::NoReply>> PrepareAsyncsigSend(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::NoReply>>(PrepareAsyncsigSendRaw(context, request, cq));
    }
    // 네트워크 참여가 완료 되었을 때 채널 그랜드 오픈!
    // M: Accept Signer에게 보냄과 동시에 채널을 오픈
    // S: Accept 수신 시 채널 오픈
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>> openChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>>(openChannelRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>> AsyncopenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>>(AsyncopenChannelRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>> PrepareAsyncopenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>>(PrepareAsyncopenChannelRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgChallenge>* AsyncjoinRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgChallenge>* PrepareAsyncjoinRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgResponse2>* AsyncdhKeyExRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgResponse2>* PrepareAsyncdhKeyExRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgAccept>* AsynckeyExFinishedRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::GrpcMsgAccept>* PrepareAsynckeyExFinishedRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::NoReply>* AsyncsigSendRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_signer::NoReply>* PrepareAsyncsigSendRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* openChannelRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* AsyncopenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* PrepareAsyncopenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status join(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc_signer::GrpcMsgChallenge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>> Asyncjoin(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>>(AsyncjoinRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>> PrepareAsyncjoin(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>>(PrepareAsyncjoinRaw(context, request, cq));
    }
    ::grpc::Status dhKeyEx(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc_signer::GrpcMsgResponse2* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>> AsyncdhKeyEx(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>>(AsyncdhKeyExRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>> PrepareAsyncdhKeyEx(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>>(PrepareAsyncdhKeyExRaw(context, request, cq));
    }
    ::grpc::Status keyExFinished(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc_signer::GrpcMsgAccept* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>> AsynckeyExFinished(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>>(AsynckeyExFinishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>> PrepareAsynckeyExFinished(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>>(PrepareAsynckeyExFinishedRaw(context, request, cq));
    }
    ::grpc::Status sigSend(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc_signer::NoReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>> AsyncsigSend(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>>(AsyncsigSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>> PrepareAsyncsigSend(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>>(PrepareAsyncsigSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>> openChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>>(openChannelRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>> AsyncopenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>>(AsyncopenChannelRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>> PrepareAsyncopenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>>(PrepareAsyncopenChannelRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>* AsyncjoinRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>* PrepareAsyncjoinRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>* AsyncdhKeyExRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>* PrepareAsyncdhKeyExRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>* AsynckeyExFinishedRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>* PrepareAsynckeyExFinishedRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>* AsyncsigSendRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>* PrepareAsyncsigSendRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* openChannelRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* AsyncopenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* PrepareAsyncopenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_join_;
    const ::grpc::internal::RpcMethod rpcmethod_dhKeyEx_;
    const ::grpc::internal::RpcMethod rpcmethod_keyExFinished_;
    const ::grpc::internal::RpcMethod rpcmethod_sigSend_;
    const ::grpc::internal::RpcMethod rpcmethod_openChannel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status join(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgJoin* request, ::grpc_signer::GrpcMsgChallenge* response);
    virtual ::grpc::Status dhKeyEx(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgResponse1* request, ::grpc_signer::GrpcMsgResponse2* response);
    virtual ::grpc::Status keyExFinished(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSuccess* request, ::grpc_signer::GrpcMsgAccept* response);
    virtual ::grpc::Status sigSend(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSsig* request, ::grpc_signer::NoReply* response);
    // 네트워크 참여가 완료 되었을 때 채널 그랜드 오픈!
    // M: Accept Signer에게 보냄과 동시에 채널을 오픈
    // S: Accept 수신 시 채널 오픈
    virtual ::grpc::Status openChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_signer::GrpcMsgReqSsig, ::grpc_signer::Identity>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_join() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgJoin* request, ::grpc_signer::GrpcMsgChallenge* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestjoin(::grpc::ServerContext* context, ::grpc_signer::GrpcMsgJoin* request, ::grpc::ServerAsyncResponseWriter< ::grpc_signer::GrpcMsgChallenge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_dhKeyEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_dhKeyEx() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_dhKeyEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dhKeyEx(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgResponse1* request, ::grpc_signer::GrpcMsgResponse2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdhKeyEx(::grpc::ServerContext* context, ::grpc_signer::GrpcMsgResponse1* request, ::grpc::ServerAsyncResponseWriter< ::grpc_signer::GrpcMsgResponse2>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_keyExFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_keyExFinished() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_keyExFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keyExFinished(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSuccess* request, ::grpc_signer::GrpcMsgAccept* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestkeyExFinished(::grpc::ServerContext* context, ::grpc_signer::GrpcMsgSuccess* request, ::grpc::ServerAsyncResponseWriter< ::grpc_signer::GrpcMsgAccept>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sigSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sigSend() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_sigSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sigSend(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSsig* request, ::grpc_signer::NoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsigSend(::grpc::ServerContext* context, ::grpc_signer::GrpcMsgSsig* request, ::grpc::ServerAsyncResponseWriter< ::grpc_signer::NoReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_openChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_openChannel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_openChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_signer::GrpcMsgReqSsig, ::grpc_signer::Identity>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestopenChannel(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc_signer::GrpcMsgReqSsig, ::grpc_signer::Identity>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_join<WithAsyncMethod_dhKeyEx<WithAsyncMethod_keyExFinished<WithAsyncMethod_sigSend<WithAsyncMethod_openChannel<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_join() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgJoin* request, ::grpc_signer::GrpcMsgChallenge* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_dhKeyEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_dhKeyEx() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_dhKeyEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dhKeyEx(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgResponse1* request, ::grpc_signer::GrpcMsgResponse2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_keyExFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_keyExFinished() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_keyExFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keyExFinished(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSuccess* request, ::grpc_signer::GrpcMsgAccept* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sigSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sigSend() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_sigSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sigSend(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSsig* request, ::grpc_signer::NoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_openChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_openChannel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_openChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_signer::GrpcMsgReqSsig, ::grpc_signer::Identity>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_join() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgJoin* request, ::grpc_signer::GrpcMsgChallenge* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestjoin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_dhKeyEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_dhKeyEx() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_dhKeyEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dhKeyEx(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgResponse1* request, ::grpc_signer::GrpcMsgResponse2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdhKeyEx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_keyExFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_keyExFinished() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_keyExFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keyExFinished(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSuccess* request, ::grpc_signer::GrpcMsgAccept* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestkeyExFinished(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sigSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sigSend() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_sigSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sigSend(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSsig* request, ::grpc_signer::NoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsigSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_openChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_openChannel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_openChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_signer::GrpcMsgReqSsig, ::grpc_signer::Identity>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestopenChannel(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_join() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_signer::GrpcMsgJoin, ::grpc_signer::GrpcMsgChallenge>(std::bind(&WithStreamedUnaryMethod_join<BaseClass>::Streamedjoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status join(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgJoin* request, ::grpc_signer::GrpcMsgChallenge* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedjoin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_signer::GrpcMsgJoin,::grpc_signer::GrpcMsgChallenge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_dhKeyEx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_dhKeyEx() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_signer::GrpcMsgResponse1, ::grpc_signer::GrpcMsgResponse2>(std::bind(&WithStreamedUnaryMethod_dhKeyEx<BaseClass>::StreameddhKeyEx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_dhKeyEx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status dhKeyEx(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgResponse1* request, ::grpc_signer::GrpcMsgResponse2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddhKeyEx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_signer::GrpcMsgResponse1,::grpc_signer::GrpcMsgResponse2>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_keyExFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_keyExFinished() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_signer::GrpcMsgSuccess, ::grpc_signer::GrpcMsgAccept>(std::bind(&WithStreamedUnaryMethod_keyExFinished<BaseClass>::StreamedkeyExFinished, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_keyExFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status keyExFinished(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSuccess* request, ::grpc_signer::GrpcMsgAccept* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedkeyExFinished(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_signer::GrpcMsgSuccess,::grpc_signer::GrpcMsgAccept>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sigSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sigSend() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_signer::GrpcMsgSsig, ::grpc_signer::NoReply>(std::bind(&WithStreamedUnaryMethod_sigSend<BaseClass>::StreamedsigSend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sigSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sigSend(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSsig* request, ::grpc_signer::NoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsigSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_signer::GrpcMsgSsig,::grpc_signer::NoReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_join<WithStreamedUnaryMethod_dhKeyEx<WithStreamedUnaryMethod_keyExFinished<WithStreamedUnaryMethod_sigSend<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_join<WithStreamedUnaryMethod_dhKeyEx<WithStreamedUnaryMethod_keyExFinished<WithStreamedUnaryMethod_sigSend<Service > > > > StreamedService;
};

}  // namespace grpc_signer


#endif  // GRPC_protobuf_5fsigner_2eproto__INCLUDED
