// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf_merger.proto

#include "protobuf_merger.pb.h"
#include "protobuf_merger.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcMtoM {

static const char* communication_method_names[] = {
  "/grpcMtoM.communication/checkAlive",
  "/grpcMtoM.communication/sendData",
};

std::unique_ptr< communication::Stub> communication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< communication::Stub> stub(new communication::Stub(channel));
  return stub;
}

communication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_checkAlive_(communication_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendData_(communication_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status communication::Stub::checkAlive(::grpc::ClientContext* context, const ::grpcMtoM::CheckAliveRequest& request, ::grpcMtoM::CheckAliveReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_checkAlive_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpcMtoM::CheckAliveReply>* communication::Stub::AsynccheckAliveRaw(::grpc::ClientContext* context, const ::grpcMtoM::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcMtoM::CheckAliveReply>::Create(channel_.get(), cq, rpcmethod_checkAlive_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcMtoM::CheckAliveReply>* communication::Stub::PrepareAsynccheckAliveRaw(::grpc::ClientContext* context, const ::grpcMtoM::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcMtoM::CheckAliveReply>::Create(channel_.get(), cq, rpcmethod_checkAlive_, context, request, false);
}

::grpc::Status communication::Stub::sendData(::grpc::ClientContext* context, const ::grpcMtoM::DataRequest& request, ::grpcMtoM::DataReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpcMtoM::DataReply>* communication::Stub::AsyncsendDataRaw(::grpc::ClientContext* context, const ::grpcMtoM::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcMtoM::DataReply>::Create(channel_.get(), cq, rpcmethod_sendData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcMtoM::DataReply>* communication::Stub::PrepareAsyncsendDataRaw(::grpc::ClientContext* context, const ::grpcMtoM::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcMtoM::DataReply>::Create(channel_.get(), cq, rpcmethod_sendData_, context, request, false);
}

communication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      communication_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< communication::Service, ::grpcMtoM::CheckAliveRequest, ::grpcMtoM::CheckAliveReply>(
          std::mem_fn(&communication::Service::checkAlive), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      communication_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< communication::Service, ::grpcMtoM::DataRequest, ::grpcMtoM::DataReply>(
          std::mem_fn(&communication::Service::sendData), this)));
}

communication::Service::~Service() {
}

::grpc::Status communication::Service::checkAlive(::grpc::ServerContext* context, const ::grpcMtoM::CheckAliveRequest* request, ::grpcMtoM::CheckAliveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status communication::Service::sendData(::grpc::ServerContext* context, const ::grpcMtoM::DataRequest* request, ::grpcMtoM::DataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcMtoM

