// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf_signer.proto

#include "protobuf_signer.pb.h"
#include "protobuf_signer.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_signer {

static const char* GruutNetworkService_method_names[] = {
  "/grpc_signer.GruutNetworkService/Join",
  "/grpc_signer.GruutNetworkService/DHKeyEx",
  "/grpc_signer.GruutNetworkService/KeyExFinished",
  "/grpc_signer.GruutNetworkService/SigSend",
  "/grpc_signer.GruutNetworkService/OpenChannel",
};

std::unique_ptr< GruutNetworkService::Stub> GruutNetworkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GruutNetworkService::Stub> stub(new GruutNetworkService::Stub(channel));
  return stub;
}

GruutNetworkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Join_(GruutNetworkService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DHKeyEx_(GruutNetworkService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeyExFinished_(GruutNetworkService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SigSend_(GruutNetworkService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenChannel_(GruutNetworkService_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status GruutNetworkService::Stub::Join(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc_signer::GrpcMsgChallenge* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Join_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>* GruutNetworkService::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::GrpcMsgChallenge>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgChallenge>* GruutNetworkService::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgJoin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::GrpcMsgChallenge>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, false);
}

::grpc::Status GruutNetworkService::Stub::DHKeyEx(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc_signer::GrpcMsgResponse2* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DHKeyEx_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>* GruutNetworkService::Stub::AsyncDHKeyExRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::GrpcMsgResponse2>::Create(channel_.get(), cq, rpcmethod_DHKeyEx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgResponse2>* GruutNetworkService::Stub::PrepareAsyncDHKeyExRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgResponse1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::GrpcMsgResponse2>::Create(channel_.get(), cq, rpcmethod_DHKeyEx_, context, request, false);
}

::grpc::Status GruutNetworkService::Stub::KeyExFinished(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc_signer::GrpcMsgAccept* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KeyExFinished_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>* GruutNetworkService::Stub::AsyncKeyExFinishedRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::GrpcMsgAccept>::Create(channel_.get(), cq, rpcmethod_KeyExFinished_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::GrpcMsgAccept>* GruutNetworkService::Stub::PrepareAsyncKeyExFinishedRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSuccess& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::GrpcMsgAccept>::Create(channel_.get(), cq, rpcmethod_KeyExFinished_, context, request, false);
}

::grpc::Status GruutNetworkService::Stub::SigSend(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc_signer::NoReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SigSend_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>* GruutNetworkService::Stub::AsyncSigSendRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::NoReply>::Create(channel_.get(), cq, rpcmethod_SigSend_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::NoReply>* GruutNetworkService::Stub::PrepareAsyncSigSendRaw(::grpc::ClientContext* context, const ::grpc_signer::GrpcMsgSsig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::NoReply>::Create(channel_.get(), cq, rpcmethod_SigSend_, context, request, false);
}

::grpc::ClientReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* GruutNetworkService::Stub::OpenChannelRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>::Create(channel_.get(), rpcmethod_OpenChannel_, context);
}

::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* GruutNetworkService::Stub::AsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>::Create(channel_.get(), cq, rpcmethod_OpenChannel_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>* GruutNetworkService::Stub::PrepareAsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>::Create(channel_.get(), cq, rpcmethod_OpenChannel_, context, false, nullptr);
}

GruutNetworkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GruutNetworkService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GruutNetworkService::Service, ::grpc_signer::GrpcMsgJoin, ::grpc_signer::GrpcMsgChallenge>(
          std::mem_fn(&GruutNetworkService::Service::Join), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GruutNetworkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GruutNetworkService::Service, ::grpc_signer::GrpcMsgResponse1, ::grpc_signer::GrpcMsgResponse2>(
          std::mem_fn(&GruutNetworkService::Service::DHKeyEx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GruutNetworkService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GruutNetworkService::Service, ::grpc_signer::GrpcMsgSuccess, ::grpc_signer::GrpcMsgAccept>(
          std::mem_fn(&GruutNetworkService::Service::KeyExFinished), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GruutNetworkService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GruutNetworkService::Service, ::grpc_signer::GrpcMsgSsig, ::grpc_signer::NoReply>(
          std::mem_fn(&GruutNetworkService::Service::SigSend), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GruutNetworkService_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GruutNetworkService::Service, ::grpc_signer::Identity, ::grpc_signer::GrpcMsgReqSsig>(
          std::mem_fn(&GruutNetworkService::Service::OpenChannel), this)));
}

GruutNetworkService::Service::~Service() {
}

::grpc::Status GruutNetworkService::Service::Join(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgJoin* request, ::grpc_signer::GrpcMsgChallenge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GruutNetworkService::Service::DHKeyEx(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgResponse1* request, ::grpc_signer::GrpcMsgResponse2* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GruutNetworkService::Service::KeyExFinished(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSuccess* request, ::grpc_signer::GrpcMsgAccept* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GruutNetworkService::Service::SigSend(::grpc::ServerContext* context, const ::grpc_signer::GrpcMsgSsig* request, ::grpc_signer::NoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GruutNetworkService::Service::OpenChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_signer::GrpcMsgReqSsig, ::grpc_signer::Identity>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_signer

